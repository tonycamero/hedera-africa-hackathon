---
ticket:
  id: P1
  title: Add persona config system (env-driven)
  labels: [persona, config, foundation]
  description: |
    Introduce PersonaType definitions, runtime loader, and .env.example settings.
  prerequisites: [P0]
  files_out:
    - lib/config/persona.types.ts
    - lib/config/persona.ts
    - .env.example
  steps:
    - mkdir -p lib/config
    - |
      cat > lib/config/persona.types.ts <<'EOF'
      export type PersonaType = 'professional' | 'genz' | 'civic';
      export interface PersonaConfig {
        type: PersonaType; name: string; tagline: string;
        features: { nftCollectibles:boolean; hashinals:boolean; civicEngagement:boolean; enterpriseRecognition:boolean; gamification:boolean; };
        theme: { name: 'metallic'|'mobile-first'|'glass-morphism'; primaryColor:string; secondaryColor:string; accentColor:string; };
        services: { recognition: 'professional'|'hashinal'|'civic'; telemetry:boolean; kns:boolean; };
        recognitionTokens: 'professional'|'genz-nft'|'civic-mixed';
        defaultSignals: string[];
      }
      EOF
    - |
      cat > lib/config/persona.ts <<'EOF'
      import type { PersonaType, PersonaConfig } from './persona.types';
      export const PERSONA_CONFIGS: Record<PersonaType, PersonaConfig> = {
        professional: { type:'professional', name:'TrustMesh Professional', tagline:'Enterprise Trust Networking',
          features:{ nftCollectibles:false, hashinals:false, civicEngagement:false, enterpriseRecognition:true, gamification:false },
          theme:{ name:'metallic', primaryColor:'#C0C0C0', secondaryColor:'#808080', accentColor:'#FFD700' },
          services:{ recognition:'professional', telemetry:false, kns:false },
          recognitionTokens:'professional', defaultSignals:['CONTACT_BOND_REQUEST_DIRECT','TRUST_ALLOCATE'] },
        genz: { type:'genz', name:'TrustMesh Campus', tagline:'Level Up Your Network',
          features:{ nftCollectibles:true, hashinals:true, civicEngagement:false, enterpriseRecognition:false, gamification:true },
          theme:{ name:'mobile-first', primaryColor:'#6366F1', secondaryColor:'#EC4899', accentColor:'#10B981' },
          services:{ recognition:'hashinal', telemetry:true, kns:true },
          recognitionTokens:'genz-nft', defaultSignals:['RECOGNITION_MINTED','NFT_COLLECTED','BOOST_RECEIVED'] },
        civic: { type:'civic', name:'TrustMesh Civic', tagline:'Power Your Campaign',
          features:{ nftCollectibles:true, hashinals:true, civicEngagement:true, enterpriseRecognition:false, gamification:true },
          theme:{ name:'glass-morphism', primaryColor:'#3B82F6', secondaryColor:'#8B5CF6', accentColor:'#F59E0B' },
          services:{ recognition:'civic', telemetry:true, kns:true },
          recognitionTokens:'civic-mixed', defaultSignals:['SUPPORT_SAVED','VOLUNTEER_SAVED','EVENT_RSVP'] }
      };
      let current: PersonaConfig | null = null;
      export function getPersona(): PersonaConfig {
        if (!current) {
          const p = (process.env.NEXT_PUBLIC_TRUSTMESH_PERSONA || 'civic') as PersonaType;
          current = PERSONA_CONFIGS[p];
          if (typeof window !== 'undefined') console.log(`[Persona] Loaded: ${current.name}`);
        }
        return current;
      }
      export const isFeatureEnabled = (k: keyof PersonaConfig['features']) => getPersona().features[k];
      export const getTheme = () => getPersona().theme;
      export function getServiceMode<T extends keyof PersonaConfig['services']>(s: T){ return getPersona().services[s]; }
      EOF
    - |
      cat >> .env.example <<'EOF'

      # ===================================
      # Persona Configuration
      # ===================================
      NEXT_PUBLIC_TRUSTMESH_PERSONA=civic
      # Optional overrides
      NEXT_PUBLIC_ENABLE_NFT_COLLECTIBLES=true
      NEXT_PUBLIC_ENABLE_HASHINALS=true
      NEXT_PUBLIC_ENABLE_CIVIC_ENGAGEMENT=true
      NEXT_PUBLIC_ENABLE_GAMIFICATION=true
      NEXT_PUBLIC_RECOGNITION_SERVICE=civic
      NEXT_PUBLIC_ENABLE_TELEMETRY=true
      NEXT_PUBLIC_ENABLE_KNS=true
      EOF
    - git add lib/config .env.example && git commit -m "feat(persona): add persona config system"
  verification:
    - node -e "console.log('persona config stubbed')"
meta:
  repo: TrustMesh_hackathon
  base_branch: feat/civic-lens
  work_branch: feat/persona-integration
  runner: warp-jr-dev
  conventions:
    commit:
      - "feat(scope): summary"
      - "chore(scope): summary"
    node: pnpm
